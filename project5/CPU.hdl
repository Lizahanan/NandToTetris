// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//handle the first MUX chip
    Not(in=instruction[15] , out=instructionA );  
        Mux16(a=ALUout , b=instruction , sel=instructionA, out=AregisterIn ); 
    //we flip the MSB of instruction
    //if it was 0 (indicating A instruction) we make into 1 and then output the whole instruction into the A register
    //otherwise if it was 1 (indicating C instruction) we make it into 0 and then we A register has ALUout

    //handle A-register 
    //loadA is one only if a=1 meaning inst[15]=0 -> meaning it's A instruction
    //and the The C-instruction specifies to write to the A register inst[5]=1
    Or(a=instructionA , b=instruction[5] , out=loadA );
    //When loadA = 1, the A register loads the value from ARegisterIn
    //The A register outputs its current value on ARegisterOut.
    //The lower 15 bits (out[0..14]) are simultaneously used as addressM to point to a memory location.
        ARegister(in=AregisterIn , load=loadA , out = ARegisterOut, out[0..14] = addressM );


    //handle the second Mux16 chip
    //AorM is equal to 1 only if it's a C instruction and we use the memory value
    //otherwise its 0
    And(a=instruction[15] , b=instruction[12] , out=AorM);
        Mux16(a=ARegisterOut , b=inM , sel=AorM , out=yALU ); 
        //this chip shows us which value to use. if AorM = 0 we use value from A otherwise we use the memmorry

    //handle the D-register
    //we load the D-reg with 1 only if we have a C instruction to load into D
    And(a=instruction[15] , b=instruction[4] , out=loadD );
        DRegister(in=ALUout , load=loadD , out=Dout );

    //handle the ALU
    ALU(x=Dout , y=yALU , zx = instruction[11], nx = instruction[10], 
    zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], 
    out = ALUout, out = outM, zr = zr, ng = ng);

    //output instruction bit to writeM
	And(a = instruction[15], b = instruction[3], out = writeM);

    //handle the jump 
    Not(in=ng , out=posres );
    Not(in=zr , out=notzerores );
    And(a=instruction[15] , b=instruction[0] , out=jgt );
    And(a=notzerores , b=posres , out=strictlypos );
    And(a=strictlypos , b=jgt , out=loadgt );
    //if the results are positive and not equal to zero we have jgt

        //handle jeq
        //if it's a C instruction and it's jump if equal to 0 instruction       
        And(a=instruction[15] , b=instruction[1] , out=jeq );
        //we check that its a jeq instruction and ALU outputs 0
        And(a=jeq , b=zr , out=loadjeq );
                //handle the negative jump        
            And(a = instruction[15], b = instruction[2], out = jlt);
            And(a = jlt, b = ng, out = loadjlt);

        //combine the conditions
            Or(a = loadgt, b = loadjeq, out = tempload);
            Or(a = loadjlt, b = tempload, out = PCload);


        //handle the PC
        PC(in = ARegisterOut, load = PCload, inc = true, reset = reset, out[0..14] = pc);

    }